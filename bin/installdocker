#!/usr/bin/env python

import os
import re
import sys
import shutil
import subprocess
import pexpect
import dockerparse

if len(sys.argv) < 2:
    print "Usage: installdocker <chroot_dir> <Dockerfile>"
    sys.exit(1)

chrootdir = sys.argv[1]
dockerfile = sys.argv[2]

shutil.copy2('/etc/resolv.conf', os.path.join(chrootdir, 'etc/resolv.conf'))

with open(dockerfile, 'r') as f:
    parsed = dockerparse.parse_dockerfile(f.read())

repopath = os.path.normpath(os.path.join(os.environ['HOME'], '.repository'))

workdir = '/'
env = {} # os.environ.copy()


def pexp_call(cmd):
    envs = ' '.join('%s=%s' % (e,v) for e,v in env.iteritems())
    truecmd = 'cd %s && %s %s' % (workdir, '%s &&' % envs if envs else '', cmd)
    son = pexpect.spawn('chroot %s /bin/sh -c %s' % (chrootdir, truecmd))
    son.expect('replace')
    son.sendline('A')

def call(cmd):
    envs = ' '.join('%s=%s' % (e,v) for e,v in env.iteritems())
    truecmd = 'cd %s && %s %s' % (workdir, '%s &&' % envs if envs else '', cmd)
    subprocess.call(['chroot', chrootdir, '/bin/sh', '-c', truecmd])

for command, value in parsed['lines']:
    if command.upper() == 'RUN':
        value = value.replace('&amp;', '&')
        pexp_call(value)
    elif command.upper() == 'WORKDIR':
        workdir = value
    elif command.upper() == 'ENV':
        e, val = re.split('\s+', value, 1)
        env[e] = val
        subprocess.call('echo \'export %s="%s"\' >> ~/.bashrc;' % (e, val), shell=True)
    elif command.upper() == 'ADD' or command.upper() == 'COPY':
        src, dst = re.split('\s+', value, 1)
        truesrc = os.path.join(repopath, src)
        truedst = os.path.join(chrootdir, dst.lstrip('/'))
        if os.path.isdir(truesrc):
            dockerparse.mkdir_p(truedst)
            shutil.copytree(os.path.join(repopath, src), truedst)
        else:
            shutil.copy2(truesrc, truedst)

