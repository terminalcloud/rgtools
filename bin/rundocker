#!/usr/bin/env python
import re
import os
import sys
import json
import errno
import urllib2
import hashlib
import subprocess
from dockerparse import mkdir_p, full_docker_url, parse_dockerfile, get_dockerfile
from dockerparse import generate_final_command_from_parsed_dockerfile as get_entrypoints


def get_envs(parsed):
    envs = parsed['ENV']
    exports = ''
    for env in envs:
      e, val = re.split('\s+', env, 1)
      exports += 'export %s="%s"; ' % (e, val)
      exports += 'echo \'export %s="%s"\' >> ~/.bashrc;\n' % (e, val)
    return exports


def get_wdir(parsed):
    if len(parsed['WDIR']) > 0:
      wdir = parsed['WDIR'][0]
      return 'cd "%s";\n' % wdir
    else:
      return ''

def make_startup_script(rootdir, runscript, parsed):
   if os.path.exists(runscript):
     print 'Docker startup script ' + runscript + 'already exists'
   else:
     with open(runscript, 'w') as f:
       if get_envs(parsed) != None:
         f.write(str(get_envs(parsed)))
       if get_wdir(parsed) != None:
         f.write(str(get_wdir(parsed)))
       if get_entrypoints(parsed) != None:
         f.write(str(get_entrypoints(parsed)))
       f.write('\n')
       f.close()

def mount_volumes(parsed, volumesdir, rootdir):
    if len(parsed['VOL']) > 0 :
      print 'Creating volumes'
      mkdir_p(volumesdir)
      for vol in parsed['VOL']:
        mkdir_p(volumesdir + vol)
        subprocess.call(["mount", "-o", "bind", (rootdir + vol), (volumesdir + vol)])


#################################### MAIN ######################################

if __name__ == '__main__':
    rootdir = sys.argv[1]

# Remove additional slashes from the argv
while (rootdir[0] == '/'): rootdir = rootdir[1:(len(rootdir)+1)]
while (rootdir[len(rootdir)-1] == '/') : rootdir = rootdir[0:(len(rootdir)-1)]

# Initialize
url = full_docker_url(rootdir)
parsed = parse_dockerfile(get_dockerfile(url))
user, dock = re.split('/', rootdir, 1)
runsh = 'run.sh'

# mount the volumes if needed
volumesdir = os.path.join(user, 'volumes')
mount_volumes(parsed, volumesdir, rootdir)

# Make the docker startup script where it should go
runscript = os.path.join(rootdir, runsh)
make_startup_script(rootdir, runscript, parsed)

# Change the startup script permissions:
os.chmod(runscript, 0755)

# Launching the Jail
subprocess.call(['chroot', ('--userspec=' + parsed['USER']), rootdir, os.path.join('/' , runsh)])
