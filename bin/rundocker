#!/usr/bin/env python
import re
import os
import sys
import subprocess
from dockerparse import mkdir_p, full_docker_url, parse_dockerfile, get_dockerfile
from dockerparse import generate_final_command_from_parsed_dockerfile as get_entrypoints


def get_envs(parsed):
    envs = parsed['ENV']
    exports = ''
    for env in envs:
      e, val = re.split('\s+', env, 1)
      exports += 'export %s=\"%s\"; ' % (e, val)
    return exports


def get_wdir(parsed):
    if len(parsed['WDIR']) > 0:
      wdir = parsed['WDIR'][0]
      return 'cd "%s"; ' % wdir
    else:
      return ''

def make_startup_script(rootdir, runscript, parsed):
   if os.path.exists(runscript):
     print 'Docker startup script ' + runscript + 'already exists'
   else:
     with open(runscript, 'w') as f:
       if get_envs(parsed) != None:
         f.write(str(get_envs(parsed)))
       if get_wdir(parsed) != None:
         f.write(str(get_wdir(parsed)))
       if get_entrypoints(parsed) != None:
         f.write(str(get_entrypoints(parsed)))
       f.write('\n')
       f.close()

def mount_volumes(parsed, volumesdir, rootdir):
    volumes = re.sub('["\[\]\ ]' , '', parsed['VOL'][0]).split(',')
    if len(volumes) > 0 :
      print 'Creating volumes'
      mkdir_p(volumesdir)
      for vol in volumes:
        mkdir_p(volumesdir + vol)
        mkdir_p(rootdir + vol)
        subprocess.call(["mount", "-o", "bind", (rootdir + vol), (volumesdir + vol)])



#################################### MAIN ######################################

if __name__ == '__main__':
    chrootdir = sys.argv[1]
    dockerfile = sys.argv[2]


# Remove additional slashes from the argv
chrootdir = chrootdir.rstrip('/').lstrip('/')

# Initialize
parsed = parse_dockerfile(open(dockerfile, 'r').read())
user, dock = os.path.split(chrootdir)

# mount the volumes if needed
volumesdir = os.path.join(user, 'volumes')
mount_volumes(parsed, volumesdir, chrootdir)

# Chroot
os.chroot(chrootdir)

# Commands execution
cmdchain = ['su'] + ['-l'] + [parsed['USER']] + ['-c'] + [str(get_envs(parsed)) + str(get_wdir(parsed)) + str(get_entrypoints(parsed))]
print cmdchain
print 'Your application is running in ports: "%s" ' % parsed['PORTS']
subprocess.call(cmdchain)
